Технічне завдання: Система діаризації та транскрипції аудіо/відео
1. Опис проєкту
Розробка API-сервісу для автоматичної діаризації та транскрипції аудіо/відео файлів з використанням Pyannote.audio для діаризації та моделі розпізнавання мовлення для транскрипції. Система інтегрується з Firebase для завантаження медіафайлів та збереження результатів.

2. Функціональні вимоги
2.1. Основні функції
Прийом запитів з URL аудіо/відео файлу та посиланням на Firebase документ
Завантаження та обробка аудіо/відео файлів
Діаризація (визначення спікерів) з використанням Pyannote.audio
Транскрипція (розпізнавання мови) з використанням сучасних STT моделей
Збереження результатів у вказаному Firebase документі
Асинхронна обробка запитів з використанням черги
2.2. API ендпоінти
POST /api/transcribe: Ініціює процес діаризації та транскрипції
2.3. Формат запиту

Copy code
{
  "media_url": "https://storage.firebase.com/path/to/media/file.mp3",
  "firestore_ref": "collection/document_id",
  "language": "en-US",
  "api_key": "your_api_key"
}

Copy code
2.4. Формат результату (в Firestore)

Copy code
{
  "transcript": "спікер 1: привіт.\nспікер 2: привіт як справи.\nспікер 1: чудово",
  "metadata": {
    "duration": 125.5,
    "speakers_count": 2,
    "processing_time": 45.3,
    "language": "uk"
  },
  "status": "DONE" 
}

Copy code
2.5. Статуси обробки
STARTED: Процес обробки розпочато
DONE: Обробка успішно завершена
ERROR: Виникла помилка під час обробки
3. Технічні вимоги
3.1. Технологічний стек
Python 3.9+
Flask для API
Firebase Admin SDK
Pyannote.audio для діаризації
google STT модель для транскрипції
Redis або інша система для реалізації черги задач
3.2. Підтримувані формати
Аудіо: WAV, MP3, FLAC, OGG, AAC, AIFF
Відео: MP4, MOV, AVI, MKV, WebM
3.3. Обмеження
Максимальна тривалість медіафайлу: 3 години
Одночасна обробка не більше 1 файлу
Максимальний розмір файлу: 500 MB
3.4. Безпека
Авторизація через API ключ
Захист від несанкціонованого доступу
Безпечне зберігання секретних даних
4. Архітектурні вимоги
4.1. Компоненти системи
API сервер (Flask)
Система черг для асинхронної обробки
Модуль діаризації (Pyannote.audio)
Модуль транскрипції (Whisper або інший)
Модуль інтеграції з Firebase
4.2. Процес обробки
Отримання запиту та валідація даних
Встановлення статусу STARTED у Firebase
Додавання завдання в чергу
Завантаження медіафайлу
Обробка аудіо (конвертація, якщо потрібно)
Діаризація для визначення спікерів
Транскрипція для розпізнавання тексту
Об'єднання результатів діаризації та транскрипції
Оновлення Firebase документа з результатами та статусом DONE
4.3. Обробка помилок
У випадку помилки статус в Firebase змінюється на ERROR
Додається інформація про тип помилки
5. Нефункціональні вимоги
5.1. Продуктивність
Час обробки 10-хвилинного аудіо: не більше 5 хвилин
Ефективне використання ресурсів сервера
5.2. Надійність
Логування на всіх етапах процесу
Механізм відновлення після збоїв
Видалення тимчасових файлів
5.3. Масштабованість
Можливість масштабування системи черг у майбутньому
6. Розгортання
6.1. Вимоги до сервера
OS: Linux
CPU: 6 ядер
RAM: 12 GB
Диск: 20 GB (SSD)
6.2. Розгортання
Git-репозиторій з проєктом
Налаштування середовища через venv
Конфігурація через змінні середовища
7. Моніторинг та обслуговування
Логування всіх етапів обробки
Моніторинг стану черги завдань
Розроблення простого веб-інтерфейсу для перегляду статусу (опціонально)
8. Подальший розвиток
Додавання підтримки роботи з ідентифікацією спікерів
Покращення точності розпізнавання для різних мов
Масштабування для паралельної обробки завдань