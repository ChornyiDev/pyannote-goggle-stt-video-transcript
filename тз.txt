Technical Specification: Audio/Video Diarization and Transcription System
1. Project Description
Development of an API service for automatic diarization and transcription of audio/video files using Pyannote.audio for diarization and a speech recognition model for transcription. The system integrates with Firebase for media file upload and result storage.

2. Functional Requirements
2.1. Main Functions
Accept requests with audio/video file URL and Firebase document reference
Download and process audio/video files
Diarization (speaker identification) using Pyannote.audio
Transcription (speech recognition) using modern STT models
Save results to the specified Firebase document
Asynchronous request processing using a queue
2.2. API Endpoints
POST /api/transcribe: Initiates the diarization and transcription process
2.3. Request Format

{
  "media_url": "https://storage.firebase.com/path/to/media/file.mp3",
  "firestore_ref": "collection/document_id",
  "language": "en-US",
  "api_key": "your_api_key"
}

2.4. Result Format (in Firestore)

{
  "transcript": "speaker 1: hello.\nspeaker 2: hello how are you.\nspeaker 1: great",
  "metadata": {
    "duration": 125.5,
    "speakers_count": 2,
    "processing_time": 45.3,
    "language": "uk"
  },
  "status": "DONE" 
}

2.5. Processing Statuses
STARTED: Processing started
DONE: Processing successfully completed
ERROR: An error occurred during processing
3. Technical Requirements
3.1. Technology Stack
Python 3.9+
Flask for API
Firebase Admin SDK
Pyannote.audio for diarization
Google STT model for transcription
Redis or another system for task queue implementation
3.2. Supported Formats
Audio: WAV, MP3, FLAC, OGG, AAC, AIFF
Video: MP4, MOV, AVI, MKV, WebM
3.3. Limitations
Maximum media file duration: 3 hours
No more than 1 file processed simultaneously
Maximum file size: 500 MB
3.4. Security
Authorization via API key
Protection against unauthorized access
Secure storage of secret data
4. Architectural Requirements
4.1. System Components
API server (Flask)
Queue system for asynchronous processing
Diarization module (Pyannote.audio)
Transcription module (Whisper or other)
Firebase integration module
4.2. Processing Workflow
Receive request and validate data
Set status to STARTED in Firebase
Add task to queue
Download media file
Process audio (convert if needed)
Diarization for speaker identification
Transcription for text recognition
Combine diarization and transcription results
Update Firebase document with results and DONE status
4.3. Error Handling
In case of error, status in Firebase changes to ERROR
Error type information is added
5. Non-functional Requirements
5.1. Performance
Processing time for 10-minute audio: no more than 5 minutes
Efficient server resource usage
5.2. Reliability
Logging at all process stages
Recovery mechanism after failures
Removal of temporary files
5.3. Scalability
Ability to scale the queue system in the future
6. Deployment
6.1. Server Requirements
OS: Linux
CPU: 6 cores
RAM: 12 GB
Disk: 20 GB (SSD)
6.2. Deployment
Git repository with the project
Environment setup via venv
Configuration via environment variables
7. Monitoring and Maintenance
Logging of all processing stages
Monitoring of task queue status
Development of a simple web interface for status viewing (optional)
8. Further Development
Add support for speaker identification
Improve recognition accuracy for different languages
Scale for parallel task processing